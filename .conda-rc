define_function() {
  name="$1"
  shift
  if [ $# -eq 0 ]; then
    echo "Usage: ${FUNCNAME[0]} <alias name> <aliased function> [args...]" >&2
    return 1
  fi
  unalias "$name" &>/dev/null || true
  eval "$name() { $@ \"\$@\"; }"
  export -f "$name"
}
defn() {
  define_function "$@"
}

install_conda() {
    if [ $# -gt 0 ]; then
        d="$1"
        path_args=(-p "$@")
    else
        d="$HOME/miniconda3"
        path_args=()
    fi
    os="$(uname -s)"
    if [ "$os" == "Darwin" ]; then
        os="MacOSX"
    fi
    arch="$(uname -m)"
    base="https://repo.anaconda.com/miniconda"
    name="$(curl "$base/" | grep "$os" | grep latest | grep -m1 "$arch" | grep -o 'Miniconda3.*sh">' | grep -o '.*.sh')"
    if [ -z "$name" ]; then
        echo "Failed to find Miniconda3 installer for $os $arch at $base" >&2
        return 1
    fi
    sh_url="$base/$name"
    echo "Downloading $sh_url" >&2
    wget -Ominiconda.sh "$sh_url"
    bash miniconda.sh -b "${path_args[@]}"
    rm miniconda.sh
    . $d/etc/profile.d/conda.sh
    echo ". $d/etc/profile.d/conda.sh" >> ~/.bashrc
    # conda="$d/bin/conda"
    conda install -y -n base conda-libmamba-solver
    conda config --set solver libmamba
    # $conda config --set channel_priority flexible  # https://github.com/rapidsai/cuml/issues/4016
    conda activate base
}
export -f install_conda
defn icd install_conda

defn cdc conda config
defn cdcg conda config --get
defn cdcs conda config --set
defn ccgs conda config --get solver
defn ccss conda config --set solver
defn cdcgs conda config --get solver
defn cdcss conda config --set solver
defn cdcssm conda config --set solver libmamba
defn cim conda install -y -n base conda-libmamba-solver

defn cel conda env list
conda_env_update() {
    case "$1" in
        -h | --help)
            echo "Usage: ${FUNCNAME[0]} [name=basename [env file]]" >&2
            return 0
        ;;
    esac
    if [ $# -gt 0 ]; then
        env="$1"; shift
    else
        env="$(basename "$PWD")"
    fi
    if [ $# -gt 0 ]; then
        file_args=(-f "$1")
        shift
    else
        file_args=()
    fi
    conda env update -n "$env" "${file_args[@]}"
}
export -f conda_env_update
defn ceu conda_env_update
conda_env_update_activate() {
    conda_env_update "$@"
    rv=$?
    if [ $rv -ne 0 ]; then
        return $rv
    fi
    if [ $# -gt 0 ]; then
        env="$1"
    else
        env="$(basename "$PWD")"
    fi
    conda activate "$env"
}
export -f conda_env_update_activate
defn ceua conda_env_update_activate

conda_activate() {
    if [ $# -eq 0 ]; then
        if [ -f .conda-env ]; then
            env="$(cat .conda-env)"
        else
            env="$(basename "$PWD")"
        fi
        cmd=(conda activate "$env")
        echo "${cmd[*]}" >&2
        "${cmd[@]}"
    else
        conda activate "$@"
    fi
}
defn cac conda_activate
defn cab conda activate base
conda_list() {
    # Call `conda list` on one or more packages
    flags=()
    pkgs=()
    for arg in "$@"; do
        if [[ "$arg" =~ "-*" ]]; then
            flags+=("$arg")
        else
            pkgs+=("$arg")
        fi
    done
    if which parallel &>/dev/null; then
        for pkg in "${pkgs[@]}"; do
            echo "$pkg"
        done | parallel -j0 -k "conda list ${flags[*]}"
    else
        for pkg in "${pkgs[@]}"; do
            conda list "${flags[@]}" "$pkg"
            rv=$?
            if [ $rv -ne 0 ]; then
                return $rv
            fi
        done
    fi | grep -v '^#'
}
export -f conda_list
defn ctl conda_list
defn cml conda_list  # conda "multi-list"
defn cls conda list
conda_list_grep() {
    grep_args=()
    for arg in "$@"; do
        grep_args+=(-e "$arg")
    done
    conda list | grep -i "${grep_args[@]}"
}
export -f conda_list_grep
defn clg conda_list_grep

defn cic conda install -c conda-forge
defn cicf conda install -c conda-forge
defn cfs conda search -c conda-forge
defn cscf conda search -c conda-forge
defn cfi conda search -c conda-forge --info
defn cscfi conda search -c conda-forge --info
defn csn conda search -c nvidia -c rapidsai
defn csncf conda search -c nvidia -c rapidsai -c conda-forge
defn cns conda search
defn cnsi conda search --info
defn cds conda search
defn cdsi conda search --info
defn cdsj conda search --json

defn ce conda env
defn cer conda env remove
defn cern conda env remove -n
defn ceryn conda env remove -y -n

conda_current_env() {
  if [ -z "$CONDA_DEFAULT_ENV" ]; then
    return 1
  else
    echo $CONDA_DEFAULT_ENV
  fi
}
export -f conda_current_env
defn cce conda_current_env

conda_current_prefix() {
  local active_prefix=$(conda info --envs --json | jq -r '.active_prefix // empty')
  if [ -z "$active_prefix" ]; then
    return 1
  else
    echo "$active_prefix"
    return 0
  fi
}
export -f conda_current_prefix
defn ccp conda_current_prefix

conda_env_remove_current() {
    env="$CONDA_DEFAULT_ENV"
    conda activate base
    conda env remove -n "$env" "$@"
}
export -f conda_env_remove_current
defn cerc conda_env_remove_current

defn cda conda deactivate

defn cdu conda uninstall
defn cdui conda uninstall
defn cduy conda uninstall -y
defn cui conda uninstall
defn cuiy conda uninstall -y

conda_search_conda_forge() {
    flags=()
    args=()
    for arg in "$@"; do
        if [[ "$arg" == -* ]]; then
            flags+=("$arg")
        else
            args+=("conda-forge::$arg")
        fi
    done
    cmd=(conda search "${flags[@]}" "${args[@]}")
    # echo "cmd: ${cmd[*]}" >&2
    "${cmd[@]}"
}
export -f conda_search_conda_forge
defn cdscf conda_search_conda_forge
defn cdscfi conda_search_conda_forge --info

defn cdf conda_deps_filter.py -f
defn cdfh conda_deps_filter.py -h -f

defn ccn conda create -n
defn cdcn conda create -n
defn cdcdn conda create -d -n

defn cddd conda-docker-deps-diff.py

conda_setup() {
    if [ -z "$CONDA_PREFIX" ]; then
        conda_bin="$CONDA_PREFIX/bin"
        conda_sh="$CONDA_PREFIX/etc/profile.d/conda.sh"
        __conda_setup="$("$conda_bin/conda" shell.bash hook 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        fi
    fi
}
export -f conda_setup
defn csu conda_setup

activate_conda() {
    if [ -n "$CONDA_PREFIX" ]; then
        conda_bin="$CONDA_PREFIX/bin"
        conda_sh="$CONDA_PREFIX/etc/profile.d/conda.sh"
        if [ -f "$conda_sh" ]; then
            . "$conda_sh"
        elif [ -d "$conda_bin" ]; then
            export PATH="$conda_bin:$PATH"
        fi
    elif [ -n "$CONDA_ROOT" ]; then  # e.g. export CONDA_ROOT=/opt/homebrew/Caskroom/mambaforge, on macOS/Homebrew
        __conda_setup="$("$CONDA_ROOT/base/bin/conda" 'shell.bash' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        fi
    else
        conda activate base
    fi
}

maybe_init_conda() {
  # Adapted from 'conda init' block / moved from ~/.bash_profile
  if [ -n "$CONDA" ]; then
    activate_conda
  fi
}

enable_conda() {
  local env=
  if [ $# -eq 1 ]; then
    env="$1"; shift
  elif [ $# -gt 0 ]; then
    echo "Usage: ${FUNCNAME[0]} [env_name]" >&2
    return 1
  fi
  export CONDA=1
  activate_conda
  if [ -n "$env" ]; then
    conda activate "$env"
  fi
}
alias cde="enable_conda"

disable_conda() {
  conda deactivate
  activate_pyenv
}
alias cdx="disable_conda"
