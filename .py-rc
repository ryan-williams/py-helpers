#!/usr/bin/env bash

defn ve virtualenv

defn piu pip install --upgrade
defn piup pip install --upgrade pip
defn piuu pip install --user --upgrade
defn pii pip install
defn pif pip show
piie() {
    pip install -e "${@:-.}"
}
export -f piie

defn pis pip search
defn piun pip uninstall
defn pui pip uninstall

piui() {
  for arg in "$@"; do
    pip uninstall "$arg"
    pip install "$arg"
  done
}
export -f piui

pil() {
    if [ $# -eq 0 ]; then
        pip list
    else
      pip list | grep -i "$@"
    fi
}
export -f pil

pilc() {
    if [ $# -eq 0 ]; then
        pip list
    else
      pip list | grep "$@"
    fi
}
export -f pilc

pir() {
  if [ $# -eq 0 ]; then
    pip install -r requirements.txt
  else
    pip install -r "$@"
  fi
}
export -f pir

python_executable() {
  python -c 'import sys; print(sys.executable)'
}
export -f python_executable
defn pex python_executable

alias apy="alias-which python"
all_python_versions() {
  alias-which python && \
  python --version && \
  (! type pyenv &>/dev/null || pyenv version) && \
  python_executable
}
export -f all_python_versions
defn apv all_python_versions

export PYTHON_DEFAULT_VERSION=3.8.5

venv() {
  base="${1:-"$(basename "$PWD")"}"
  shift
  version="${1:-${PYTHON_DEFAULT_VERSION}}"
  shift
  echo "$base $version"
  name="$base-$version"
  pyenv virtualenv "$version" "$name" && \
  pyenv local "$name" && \
  pip install --upgrade pip ipykernel && \
  install_kernel
}

defn pci python-check-import
defn ppp print-python-path
defn pmp python-module-path

defn py python-eval

alias pyv="python --version"

python_major_version() {
  python --version 2>&1 | grep -o '^Python [0-9]' | grep -o '[0-9]'
}
defn pymv python_major_version

epp() {
  echo "$PYTHONPATH"
}
export -f epp

install_kernel() {
  if [ $# -eq 0 ]; then
    kernel="$(pyenv version | first)"
  else
    kernel="$1"
    shift
  fi
  python -m ipykernel install --user --name "$kernel"
}
export -f install_kernel
defn jik install_kernel

if ! which pyenv &>/dev/null && [ -e "$HOME/.pyenv/bin" ]; then
  prepend_to_path "$HOME/.pyenv/bin"
fi
if which pyenv &>/dev/null; then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

if which brew &>/dev/null; then
  pyei() {
    CPPFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix sqlite)/include" pyenv install "$@"
  }
else
  defn pyei pyenv install
fi

defn jp jupyter
defn jnb jupyter notebook
# Useful for running Jupyter in Docker (requires dangling port argument value, as written)
defn jnbd jupyter notebook --ip 0.0.0.0 --ContentsManager.allow_hidden=True --allow-root --port
defn jnc jupyter nbconvert
defn jpl jupyter notebook list
defn jyl jupyter notebook list
defn jkl jupyter kernelspec list

pyenv_list() {
  if [ $# -gt 0 ]; then
    pyenv versions | grep "$@"
  else
    pyenv versions
  fi
}
export -f pyenv_list
defn pys pyenv_list

defn pyl pyenv local
defn pyg pyenv global
pyenv_find() {
  pyenv install -l | grep "$@"
}
export -f pyenv_find
defn pyf pyenv_find

defn nd nbdiff-web
defn ndw nbdiff-web
defn nbw nbdiff-web

defn pm papermill
defn ppm papermill
defn pmh papermill -h
defn ppmh papermill -h

copy_jupyter_config() {
  dir=".jupyter/nbconfig"
  path="$dir/notebook.json"
  ssh "$@" "mkdir -p $dir"
  host="${@:$#}"
  args=("${@:1:(($#-1))}")
  scp "${args[@]}" "$HOME/$path" "$host:$path"
}
export -f copy_jupyter_config
defn cjc copy_jupyter_config

convert_nb() {
  if [ $# -lt 1 ]; then
    echo "Illegal call to convert_nb wrapper; usage: $0 <output format> <input notebook> [output path]" >&2
    return 1
  fi
  fmt="$1"; shift
  if [ "$fmt" == "md" -o "$fmt" == "markdown" ]; then
    xtn=md
    to=markdown
  elif [ "$fmt" == "py" -o "$fmt" == "python" ]; then
    xtn=py
    to=python
  elif [ "$fmt" == "ipynb" -o "$fmt" == "notebook" ]; then
    xtn=ipynb
    to=notebook
  else
    xtn="$fmt"
    to="$fmt"
  fi
  if [ $# -eq 0 -o $# -gt 2 ]; then
    echo "Usage: $0 <input path> [output path]" >&2
    return 2
  fi
  input="$1"; shift
  if [ $# -gt 0 ]; then
    output="$1"; shift
  else
    output="${input%.*}.$xtn"
  fi
  jupyter nbconvert --to "$to" --output "$output" "$input"
}

notebook_to() {
  fmts="$1"; shift
  IFS=', ' read -r -a fmts <<< "$fmts"
  for fmt in "${fmts[@]}"; do
    convert_nb "$fmt" "$@"
  done
}
export -f notebook_to
defn nb2 notebook_to

defn nb2md convert_nb md
defn nb2m convert_nb md

defn nb2html convert_nb html
defn nb2h convert_nb html

defn nb2py convert_nb py
defn nb2p convert_nb py

defn nb2hm nb2 html,md
