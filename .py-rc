#!/usr/bin/env bash

defn ve virtualenv

defn piu pip install --upgrade
defn piup pip install --upgrade pip
defn piuu pip install --user --upgrade
defn pii pip install
defn pif pip show
piie() {
    pip install -e "${@:-.}"
}
export -f piie

defn pis pip search
defn piun pip uninstall
defn pui pip uninstall

piui() {
  for arg in "$@"; do
    pip uninstall "$arg"
    pip install "$arg"
  done
}
export -f piui

pil() {
    if [ $# -eq 0 ]; then
        pip list
    else
      args=()
      for arg in "$@"; do
        args+=("-e" "$arg")
      done
      pip list | grep -i "${args[@]}"
    fi
}
export -f pil

pilc() {
    if [ $# -eq 0 ]; then
        pip list
    else
      pip list | grep "$@"
    fi
}
export -f pilc

pir() {
  if [ $# -eq 0 ]; then
    pip install -r requirements.txt
  else
    pip install -r "$@"
  fi
}
export -f pir

python_executable() {
  python -c 'import sys; print(sys.executable)'
}
export -f python_executable
defn pex python_executable
defn ppe python_executable

alias apy="alias-which python"
all_python_versions() {
  alias-which python && \
  python --version && \
  (! type pyenv &>/dev/null || pyenv version) && \
  python_executable
}
export -f all_python_versions
defn apv all_python_versions

export PYTHON_DEFAULT_VERSION=3.9.13

venv() {
  base="${1:-"$(basename "$PWD")"}"
  shift
  version="${1:-${PYTHON_DEFAULT_VERSION}}"
  shift
  echo "$base $version"
  name="$base-$version"
  pyenv virtualenv "$version" "$name" && \
  pyenv local "$name" && \
  pip install --upgrade pip ipykernel && \
  install_kernel
}

defn pci python-check-import
defn ppp print-python-path
defn pmp python-module-path

defn py python-eval

alias pyv="python --version"

python_major_version() {
  python --version 2>&1 | grep -o '^Python [0-9]' | grep -o '[0-9]'
}
defn pymv python_major_version

epp() {
  echo "$PYTHONPATH"
}
export -f epp

install_kernel() {
  if [ $# -eq 0 ]; then
    if [ -n "$CONDA_DEFAULT_ENV" ]; then
        kernel="conda-$CONDA_DEFAULT_ENV"
    else
        kernel="$(pyenv version | first)"
    fi
  else
    kernel="$1"
    shift
  fi
  python -m ipykernel install --user --name "$kernel"
}
export -f install_kernel
defn jik install_kernel

if [ -z "$CONDA" ]; then
    if ! which pyenv &>/dev/null && [ -e "$HOME/.pyenv/bin" ]; then
      prepend_to_path "$HOME/.pyenv/bin"
    fi
    if which pyenv &>/dev/null; then
      export PYENV_ROOT="$HOME/.pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init --path)"
      eval "$(pyenv virtualenv-init -)"
    fi
fi

if which brew &>/dev/null; then
  pyei() {
    CPPFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix sqlite)/include" pyenv install "$@"
  }
else
  defn pyei pyenv install
fi

defn jp jupyter
defn jnb jupyter notebook
# Useful for running Jupyter in Docker (requires dangling port argument value, as written)
defn jnbd jupyter notebook --ip 0.0.0.0 --ContentsManager.allow_hidden=True --allow-root --port
defn jnc jupyter nbconvert
defn jnnc jupyter-nbconvert-clean
defn jpl jupyter notebook list
defn jyl jupyter notebook list
defn jkl jupyter kernelspec list
defn jyo jupyter-open.py

pyenv_list() {
  if [ $# -gt 0 ]; then
    pyenv versions | grep "$@"
  else
    pyenv versions
  fi
}
export -f pyenv_list
defn pys pyenv_list

defn pyl pyenv local
defn pyg pyenv global
pyenv_find() {
  pyenv install -l | grep "$@"
}
export -f pyenv_find
defn pyf pyenv_find

defn nd nbdiff-web
defn ndw nbdiff-web
defn nbw nbdiff-web

defn pm papermill
defn ppm papermill
defn pmh papermill -h
defn ppmh papermill -h

copy_jupyter_config() {
  dir=".jupyter/nbconfig"
  path="$dir/notebook.json"
  ssh "$@" "mkdir -p $dir"
  host="${@:$#}"
  args=("${@:1:(($#-1))}")
  scp "${args[@]}" "$HOME/$path" "$host:$path"
}
export -f copy_jupyter_config
defn cjc copy_jupyter_config

convert_nb() {
  if [ $# -lt 1 ]; then
    echo "Illegal call to convert_nb wrapper; usage: $0 <output format> <input notebook> [output path]" >&2
    return 1
  fi
  fmt="$1"; shift
  if test "$fmt" == "md" || test "$fmt" == "markdown" ; then
    xtn=md
    to=markdown
  elif test "$fmt" == "py" || test "$fmt" == "python" ; then
    xtn=py
    to=python
  elif test "$fmt" == "ipynb" || test "$fmt" == "notebook" ; then
    xtn=ipynb
    to=notebook
  else
    xtn="$fmt"
    to="$fmt"
  fi
  if test $# -eq 0 || test $# -gt 2 ; then
    echo "Usage: $0 <input path> [output path]" >&2
    return 2
  fi
  input="$1"; shift
  if [ $# -gt 0 ]; then
    output="$1"; shift
  else
    output="${input%.*}.$xtn"
  fi
  jupyter nbconvert --to "$to" --output "$output" "$input"
}

notebook_to() {
  fmts="$1"; shift
  IFS=', ' read -r -a fmts <<< "$fmts"
  for fmt in "${fmts[@]}"; do
    convert_nb "$fmt" "$@"
  done
}
export -f notebook_to
defn nb2 notebook_to

defn nb2md convert_nb md
defn nb2m convert_nb md

defn nb2html convert_nb html
defn nb2h convert_nb html

defn nb2py convert_nb py
defn nb2p convert_nb py

defn nb2hm nb2 html,md

defn rpd run-pydocker.sh

clean_notebook() {
  if [ $# -eq 0 ]; then
    cat | jq 'del(.cells|.[]|.metadata|.papermill,.execution)|del(.metadata|.papermill,.widgets)'
  else
    for arg in "$@"; do
      out="$(mktemp)"
      jq 'del(.cells|.[]|.metadata|.papermill,.execution)|del(.metadata|.papermill,.widgets)' "$arg" > "$out"
      mv "$out" "$arg"
    done
  fi
}
defn cnb clean_notebook

defn pss simple-server

defn ptlf pytest --lf

find_python_imports() {
    git grep -e '^from [^\.]*' -e '^import [^\.]*' \
    | sed 's/^[^:]\+://' \
    | awk '{ print $1,$2 }' \
    | awk -F. '{ print $1 }' \
    | awk '{ print $2 }' \
    | sort \
    | uniq
}
export -f find_python_imports
defn fpi find_python_imports

install_conda() {
    if [ $# -gt 0 ]; then
        d="$1"
        path_args=(-p "$@")
    else
        d="~/miniconda3"
        path_args=()
    fi
    wget -Ominiconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_23.1.0-1-Linux-x86_64.sh
    bash miniconda.sh -b "${path_args[@]}"
    rm miniconda.sh
    echo ". $d/etc/profile.d/conda.sh" >> ~/.bashrc
    conda="$d/bin/conda"
    "$conda" install -y -n base conda-libmamba-solver
    "$conda" config --set solver libmamba
    # $conda config --set channel_priority flexible  # https://github.com/rapidsai/cuml/issues/4016
    "$conda" activate base
}

defn cdc conda config
defn cdcg conda config --get
defn cdcs conda config --set
defn cdcgs conda config --get solver
defn cdcss conda config --set solver
defn cdcssm conda config --set solver libmamba
defn cim conda install -y -n base conda-libmamba-solver

defn cel conda env list
conda_env_update() {
    if [ $# -eq 0 ]; then
        echo "Usage: $0 <env name> [env file]" >&2
        return 1
    fi
    env="$1"; shift
    if [ $# -gt 0 ]; then
        file_args=(-f "$1")
        shift
    else
        file_args=()
    fi
    conda env update -n "$env" "${file_args[@]}"
}
export -f conda_env_update
defn ceu conda_env_update
conda_env_update_activate() {
    conda_env_update "$@" && conda activate "$1"
}
export -f conda_env_update_activate
defn ceua conda_env_update_activate
defn cac conda activate
defn cab conda activate base
conda_list() {
    # Call `conda list` on one or more packages
    flags=()
    pkgs=()
    for arg in "$@"; do
        if [[ "$arg" =~ "-*" ]]; then
            flags+=("$arg")
        else
            pkgs+=("$arg")
        fi
    done
    for pkg in "${pkgs[@]}"; do
        conda list "${flags[@]}" "$pkg"
        rv=$?
        if [ $rv -ne 0 ]; then
            return $rv
        fi
    done
}
export -f conda_list
defn ctl conda_list
defn cml conda_list  # conda "multi-list"
defn cls conda list

defn cicf conda install -c conda-forge
defn cscf conda search -c conda-forge
defn cscfi conda search -c conda-forge --info
defn cns conda search
defn cnsi conda search --info
defn cds conda search
defn cdsi conda search --info
