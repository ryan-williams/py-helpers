#!/usr/bin/env bash

defn ve virtualenv

defn piu pip install --upgrade
defn piup pip install --upgrade pip
defn piuu pip install --user --upgrade
defn pii pip install
defn pis pip search
defn piun pip uninstall

piui() {
  for arg in "$@"; do
    pip uninstall "$arg"
    pip install "$arg"
  done
}
export -f piui

pil() {
    if [ $# -eq 0 ]; then
        pip list
    else
      pip list | grep "$@"
    fi
}
export -f pil

pir() {
  if [ $# -eq 0 ]; then
    pip install -r requirements.txt
  else
    pip install -r "$@"
  fi
}
export -f pir

pex() {
  python -c 'import sys; print(sys.executable)'
}
export -f pex

alias apy="alias-which python"
alias apv="alias-which python && python --version && pyenv version && pex"

export PYTHON_DEFAULT_VERSION=3.7.4

venv() {
  base="${1:-"$(basename "$PWD")"}"
  shift
  version="${1:-${PYTHON_DEFAULT_VERSION}}"
  shift
  echo "$base $version"
  name="$base-$version"
  set -e
  pyenv virtualenv "$version" "$name"
  pyenv local "$name"
  pip install --upgrade pip ipykernel
  install_kernel
}

defn pci python-check-import
defn ppp print-python-path
defn pmp python-module-path

defn py python-eval

alias pyv="python --version"

python_major_version() {
  python --version 2>&1 | grep -o '^Python [0-9]' | grep -o '[0-9]'
}
defn pymv python_major_version

epp() {
  echo "$PYTHONPATH"
}
export -f epp

install_kernel() {
  if [ $# -eq 0 ]; then
    kernel="$(pyenv version | first)"
  else
    kernel="$1"
    shift
  fi
  python -m ipykernel install --user --name "$kernel"
}
export -f install_kernel
defn jik install_kernel

if ! which pyenv &>/dev/null && [ -e "$HOME/.pyenv/bin" ]; then
  prepend_to_path "$HOME/.pyenv/bin"
fi
if which pyenv &>/dev/null; then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

if which brew &>/dev/null; then
  pyei() {
    CPPFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix sqlite)/include" pyenv install "$@"
  }
else
  defn pyei pyenv install
fi
