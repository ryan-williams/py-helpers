#!/usr/bin/env bash

defn ve virtualenv

defn pidr pip install --dry-run
defn piu pip install --upgrade
defn piup pip install --upgrade pip
defn piuu pip install --user --upgrade
defn pii pip install
defn pif pip show
piie() {
    pip install -e "${@:-.}"
}
export -f piie

defn pis pip search
defn piun pip uninstall
defn pui pip uninstall

piui() {
  for arg in "$@"; do
    pip uninstall "$arg"
    pip install "$arg"
  done
}
export -f piui

pil() {
    if [ $# -eq 0 ]; then
        pip list
    else
      args=()
      for arg in "$@"; do
        args+=("-e" "$arg")
      done
      pip list | grep -i "${args[@]}"
    fi
}
export -f pil

pilc() {
    if [ $# -eq 0 ]; then
        pip list
    else
      pip list | grep "$@"
    fi
}
export -f pilc

pir() {
  if [ $# -eq 0 ]; then
    pip install -r requirements.txt
  else
    pip install -r "$@"
  fi
}
export -f pir

python_executable() {
  python -c 'import sys; print(sys.executable)'
}
export -f python_executable
defn pex python_executable
defn ppe python_executable

defn pyi python -i

alias apy="alias-which python"
all_python_versions() {
  alias-which python && \
  python --version && \
  (! type pyenv &>/dev/null || pyenv version) && \
  python_executable
}
export -f all_python_versions
defn apv all_python_versions

export PYTHON_DEFAULT_VERSION=3.11.8
default_python_version() {
    echo "$PYTHON_DEFAULT_VERSION"
}
export -f default_python_version
defn dpv default_python_version

defn pci python-check-import
defn ppp print-python-path
defn pmp python-module-path

defn py python-eval

alias pyv="python --version"

python_major_version() {
  python --version 2>&1 | grep -o '^Python [0-9]' | grep -o '[0-9]'
}
defn pymv python_major_version

epp() {
  echo "$PYTHONPATH"
}
export -f epp

install_kernel() {
  if [ $# -eq 0 ]; then
    if [ -n "$CONDA_DEFAULT_ENV" ]; then
        kernel="conda-$CONDA_DEFAULT_ENV"
    else
        kernel="$(pyenv version | first)"
    fi
  else
    kernel="$1"
    shift
  fi
  python -m ipykernel install --user --name "$kernel"
}
export -f install_kernel
defn jik install_kernel

if [ -z "$CONDA" ]; then
    if ! which pyenv &>/dev/null && [ -e "$HOME/.pyenv/bin" ]; then
      prepend_to_path "$HOME/.pyenv/bin"
    fi
    if which pyenv &>/dev/null; then
      export PYENV_ROOT="$HOME/.pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init --path)"
      eval "$(pyenv virtualenv-init -)"
    fi
fi

if which brew &>/dev/null; then
  pyei() {
    CPPFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix sqlite)/include" pyenv install "$@"
  }
else
  defn pyei pyenv install
fi

defn jp jupyter
defn jnb jupyter notebook
defn jbp jupyter notebook --port
defn jnbp jupyter notebook --port
# Useful for running Jupyter in Docker (requires dangling port argument value, as written)
defn jnbd jupyter notebook --ip 0.0.0.0 --ContentsManager.allow_hidden=True --allow-root --port
defn jnc jupyter nbconvert
defn jncs jupyter nbconvert --to slides
defn jncs. jupyter nbconvert --to slides --output-dir=.
defn jnct jupyter nbconvert --to
defn jnnc jupyter-nbconvert-clean
defn jpl jupyter notebook list
defn jyl jupyter notebook list
defn jkl jupyter kernelspec list
defn jyo jupyter-open.py

jupyter_skip_slides() {
    if [ "$1" == "-i" ]; then
        shift
        path="$1"
        tmp="$(mktemp)"
        jupyter_skip_slides "$@" > "$tmp"
        mv "$tmp" "$path"
    else
        if [ $# -ne 1 ]; then
            echo "Usage: $0 [-i] <ipynb path>" >&2
            return 1
        fi
        path="$1"; shift
        local dir="$(dirname "${BASH_SOURCE[0]}")"
        jq -f "$dir/ipynb-skip-slides.jq" "$path"
    fi
}
export -f jupyter_skip_slides
defn jss jupyter_skip_slides
defn jssi jupyter_skip_slides -i

defn jpt jupyter-parse-table.py

# See also: `juq cells -s <idx or slice> [path]`
jupyter_cell_source() {
    local usage="Usage: $0 [-s sep] <cell idx or range, jq syntax> [ipynb path]"
    local sep=
    if [ "$1" == "-s" ]; then
        shift
        if [ $# -eq 0 ]; then
            echo "$usage" >&2
            return 1
        fi
        local sep="$1"; shift
    else
        local sep="\n========\n"
    fi
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "$usage" >&2
        return 1
    fi
    local cells="$1"; shift
    if [[ "$cells" == *:* ]]; then
        local query=".cells[$cells] | map(.source | join(\"\")) | join(\"$sep\")"
    else
        local query=".cells[$cells].source | join(\"\")"
    fi

    if [ $# -gt 0 ]; then
        local path="$1"; shift
        jq -r "$query" "$path"
    else
        cat | jq -r "$query"
    fi
}
export -f jupyter_cell_source
defn jcs jupyter_cell_source

# See also: `juq cells -tc <idx or slice> [path]`
jupyter_code_cells() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "Usage: $0 <cell idx or range, jq syntax> [ipynb path]" >&2
        return 1
    fi
    local cells="$1"; shift
    local query='[.cells[] | select(.cell_type == "code")]'"[$cells]"
    if [ $# -gt 0 ]; then
        cat "$1" | jq "$query"
    else
        cat | jq "$query"
    fi
}
export -f jupyter_code_cells
defn jcc jupyter_code_cells

pyenv_list() {
  if [ $# -gt 0 ]; then
    pyenv versions | grep "$@"
  else
    pyenv versions
  fi
}
export -f pyenv_list
defn pyl pyenv_list

defn pyg pyenv global
defn pysg pyenv global
defn pysl pyenv local
pyenv_search() {
  pyenv install -l | grep "$@"
}
export -f pyenv_search
defn pys pyenv_search

defn nd nbdiff-web
defn nbd nbdiff
defn nbdi nbdiff -I
defn nbds nbdiff -s
defn nds nbdiff-web -s
defn ndso nbdiff-web -so
defn ndw nbdiff-web
defn nbw nbdiff-web

defn pm papermill
defn ppm papermill
defn pmh papermill -h
defn ppmh papermill -h

copy_jupyter_config() {
  dir=".jupyter/nbconfig"
  path="$dir/notebook.json"
  ssh "$@" "mkdir -p $dir"
  host="${@:$#}"
  args=("${@:1:(($#-1))}")
  scp "${args[@]}" "$HOME/$path" "$host:$path"
}
export -f copy_jupyter_config
defn cjc copy_jupyter_config

convert_nb() {
  if [ $# -lt 1 ]; then
    echo "Illegal call to convert_nb wrapper; usage: $0 <output format> <input notebook> [output path]" >&2
    return 1
  fi
  fmt="$1"; shift
  if test "$fmt" == "md" || test "$fmt" == "markdown" ; then
    xtn=md
    to=markdown
  elif test "$fmt" == "py" || test "$fmt" == "python" ; then
    xtn=py
    to=python
  elif test "$fmt" == "ipynb" || test "$fmt" == "notebook" ; then
    xtn=ipynb
    to=notebook
  else
    xtn="$fmt"
    to="$fmt"
  fi
  if test $# -eq 0 || test $# -gt 2 ; then
    echo "Usage: $0 <input path> [output path]" >&2
    return 2
  fi
  input="$1"; shift
  if [ $# -gt 0 ]; then
    output="$1"; shift
  else
    output="${input%.*}.$xtn"
  fi
  jupyter nbconvert --to "$to" --output "$output" "$input"
}
export -f convert_nb

notebook_to() {
  fmts="$1"; shift
  IFS=', ' read -r -a fmts <<< "$fmts"
  for fmt in "${fmts[@]}"; do
    convert_nb "$fmt" "$@"
  done
}
export -f notebook_to
defn nb2 notebook_to

defn nb2md convert_nb md
defn nb2m convert_nb md

defn nb2html convert_nb html
defn nb2h convert_nb html

defn nb2py convert_nb py
defn nb2p convert_nb py

defn nb2hm nb2 html,md

defn rpd run-pydocker.sh

defn juqc juq cells
defn juqcc juq cells -tc
defn juqcco juq cells -tc -o
defn juqcm juq cells -m
defn juqco juq cells -o
defn juqcs juq cells -s
defn juqpc juq papermill-clean
defn juqpci juq papermill-clean -i
defn juqmo juq merge-outputs
defn juqmoi juq merge-outputs -i

clean_notebook() {
    jq='.cells |= map(del(.id) | .metadata |= del(.papermill,.execution,.widgets)) | del(.metadata.papermill)'
    if [ $# -eq 0 ]; then
        cat | jq "$jq"
    elif [ $# -eq 1 ]; then
        out="$(mktemp)"
        echo "Cleaning $1 in-place (temp file: $out)" >&2
        jq "$jq" "$1" > "$out"
        mv "$out" "$1"
    elif [ $# -eq 2 ]; then
        in="$1"; shift
        out="$1"; shift
        if [ -d "$out" ]; then
            out="${out%/}/$(basename "$in")"
        fi
        echo "Cleaning $in, saving to $out" >&2
        jq "$jq" "$in" > "$out"
    else
        echo "Usage: clean_notebook [path [out_path]]" >&2
        return 1
    fi
}
defn cnb clean_notebook

papermill_clean() {
    if [ $# -lt 2 ]; then
        echo "Usage: $0 [...papermill args] <notebook path> <output path>" >&2
        return 1
    fi
    in="${@: -2:1}"
    echo "in: ${in[*]}"
    out="${@: -1}"
    if [ -d "$out" ]; then
        out="${out%/}/$(basename "$in")"
    fi
    args=("${@:1:(($#-2))}")
    papermill "${args[@]}" "$in" "$out"
    clean_notebook "$out"
}
export -f papermill_clean
defn pmc papermill_clean

papermill_clean_inplace() {
    path=${@: -1}
    tmp="$(mktemp)"
    papermill "$@" "$tmp"
    clean_notebook "$tmp" "$path"
}
export -f papermill_clean_inplace
defn pmci papermill_clean_inplace

defn pss simple-server

defn ptlf pytest --lf

poetry_deps() {
    cat pyproject.toml | yq -r -ptoml -oj '.tool.poetry.dependencies | to_entries | [ .[] | select(.key != "python") ] | map([.key, .value] | join("==")) | join("\n")'
}
export -f poetry_deps

poetry_dev_deps() {
    cat pyproject.toml | yq -r -ptoml -oj '.tool.poetry.dev-dependencies | to_entries | map([.key, .value] | join("==")) | join("\n")'
}
export -f poetry_dev_deps

find_python_imports() {
    git grep -e '^from [^\.]*' -e '^import [^\.]*' \
    | sed 's/^[^:]\+://' \
    | awk '{ print $1,$2 }' \
    | awk -F. '{ print $1 }' \
    | awk '{ print $2 }' \
    | sort \
    | uniq
}
export -f find_python_imports
defn fpi find_python_imports

install_conda() {
    if [ $# -gt 0 ]; then
        d="$1"
        path_args=(-p "$@")
    else
        d="$HOME/miniconda3"
        path_args=()
    fi
    os="$(uname -s)"
    if [ "$os" == "Darwin" ]; then
        os="MacOSX"
    fi
    arch="$(uname -m)"
    base="https://repo.anaconda.com/miniconda"
    name="$(curl "$base/" | grep "$os" | grep latest | grep -m1 "$arch" | grep -o 'Miniconda3.*sh">' | grep -o '.*.sh')"
    if [ -z "$name" ]; then
        echo "Failed to find Miniconda3 installer for $os $arch at $base" >&2
        return 1
    fi
    sh_url="$base/$name"
    echo "Downloading $sh_url" >&2
    wget -Ominiconda.sh "$sh_url"
    bash miniconda.sh -b "${path_args[@]}"
    rm miniconda.sh
    . $d/etc/profile.d/conda.sh
    echo ". $d/etc/profile.d/conda.sh" >> ~/.bashrc
    # conda="$d/bin/conda"
    conda install -y -n base conda-libmamba-solver
    conda config --set solver libmamba
    # $conda config --set channel_priority flexible  # https://github.com/rapidsai/cuml/issues/4016
    conda activate base
}
export -f install_conda
defn icd install_conda

defn cdc conda config
defn cdcg conda config --get
defn cdcs conda config --set
defn cdcgs conda config --get solver
defn cdcss conda config --set solver
defn cdcssm conda config --set solver libmamba
defn cim conda install -y -n base conda-libmamba-solver

defn cel conda env list
conda_env_update() {
    case "$1" in
        -h | --help)
            echo "Usage: ${FUNCNAME[0]} [name=basename [env file]]" >&2
            return 0
        ;;
    esac
    if [ $# -gt 0 ]; then
        env="$1"; shift
    else
        env="$(basename "$PWD")"
    fi
    if [ $# -gt 0 ]; then
        file_args=(-f "$1")
        shift
    else
        file_args=()
    fi
    conda env update -n "$env" "${file_args[@]}"
}
export -f conda_env_update
defn ceu conda_env_update
conda_env_update_activate() {
    conda_env_update "$@"
    rv=$?
    if [ $rv -ne 0 ]; then
        return $rv
    fi
    if [ $# -gt 0 ]; then
        env="$1"
    else
        env="$(basename "$PWD")"
    fi
    conda activate "$env"
}
export -f conda_env_update_activate
defn ceua conda_env_update_activate
defn cac conda activate
defn cab conda activate base
conda_list() {
    # Call `conda list` on one or more packages
    flags=()
    pkgs=()
    for arg in "$@"; do
        if [[ "$arg" =~ "-*" ]]; then
            flags+=("$arg")
        else
            pkgs+=("$arg")
        fi
    done
    for pkg in "${pkgs[@]}"; do
        conda list "${flags[@]}" "$pkg"
        rv=$?
        if [ $rv -ne 0 ]; then
            return $rv
        fi
    done
}
export -f conda_list
defn ctl conda_list
defn cml conda_list  # conda "multi-list"
defn cls conda list

defn cicf conda install -c conda-forge
defn cscf conda search -c conda-forge
defn cscfi conda search -c conda-forge --info
defn csn conda search -c nvidia -c rapidsai
defn csncf conda search -c nvidia -c rapidsai -c conda-forge
defn cns conda search
defn cnsi conda search --info
defn cds conda search
defn cdsi conda search --info
defn cdsj conda search --json

defn cdu conda uninstall
defn cduy conda uninstall -y
defn cui conda uninstall
defn cuiy conda uninstall -y

conda_search_conda_forge() {
    flags=()
    args=()
    for arg in "$@"; do
        if [[ "$arg" == -* ]]; then
            flags+=("$arg")
        else
            args+=("conda-forge::$arg")
        fi
    done
    cmd=(conda search "${flags[@]}" "${args[@]}")
    # echo "cmd: ${cmd[*]}" >&2
    "${cmd[@]}"
}
export -f conda_search_conda_forge
defn cdscf conda_search_conda_forge
defn cdscfi conda_search_conda_forge --info

defn cdf conda_deps_filter.py -f
defn cdfh conda_deps_filter.py -h -f

defn cdcn conda create -n
defn cdcdn conda create -d -n

defn cddd conda-docker-deps-diff.py

summarize_nb() {
    local cwd="$(dirname "${BASH_SOURCE[0]}")"
    jq -f "$cwd/summarize-nb.jq" "$@"
}
export -f summarize_nb
defn snb summarize_nb
defn sno summarize_nb

defn hp hash-port.py
defn hshp hash-port.py

nbdime_enable() {
    pip install nbdime
    nbdime config-git --enable
}
export -f nbdime_enable
defn nbde nbdime_enable

conda_setup() {
    if [ -z "$CONDA_PREFIX" ]; then
        conda_bin="$CONDA_PREFIX/bin"
        conda_sh="$CONDA_PREFIX/etc/profile.d/conda.sh"
        __conda_setup="$("$conda_bin/conda" shell.bash hook 2> /dev/null)"
        if [ $? -eq 0 ]; then
            echo "**conda_setup"
            eval "$__conda_setup"
        fi
    fi
}
export -f conda_setup
defn csu conda_setup

# Adapted from 'conda init' block / moved from ~/.bash_profile
if [ -n "$CONDA" ]; then
    if [ -n "$CONDA_PREFIX" ]; then
        conda_bin="$CONDA_PREFIX/bin"
        conda_sh="$CONDA_PREFIX/etc/profile.d/conda.sh"
        if [ -f "$conda_sh" ]; then
            echo "** sourcing $conda_sh"
            . "$conda_sh"
        elif [ -d "$conda_bin" ]; then
            echo "** prepending conda PATH: $conda_bin"
            export PATH="$conda_bin:$PATH"
        fi
    elif [ -n "$CONDA_ROOT" ]; then  # e.g. export CONDA_ROOT=/opt/homebrew/Caskroom/mambaforge, on macOS/Homebrew
        __conda_setup="$("$CONDA_ROOT/base/bin/conda" 'shell.bash' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            echo "** __conda_setup"
            eval "$__conda_setup"
        fi
    fi
fi
