#!/usr/bin/env bash

defn ipykernel_install python -m ipykernel install
defn jii python -m ipykernel install
defn jki python -m ipykernel install
defn jkin python -m ipykernel install --name

jupyter_install_kernel() {
  if [ $# -eq 0 ]; then
    if [ -n "$CONDA_DEFAULT_ENV" ]; then
        kernel="conda-$CONDA_DEFAULT_ENV"
    else
        kernel="$(pyenv version | awk '{print $1}')"
    fi
  else
    kernel="$1"
    shift
  fi
  python -m ipykernel install --user --name "$kernel"
}
export -f jupyter_install_kernel
defn jik jupyter_install_kernel
jupyter_install_kernel_path() {
    if [ $# -gt 1 ]; then
        echo "Usage«: jupyter_install_kernel_path [path=.jupyter]" >&2
        return 1
    fi
    display_name="$(python --version)"
    python -m ipykernel install --prefix "${1:-.jupyter}" --display-name "$display_name"
}
export -f jupyter_install_kernel_path
defn jikp jupyter_install_kernel_path

jupyter_install_kernel_path_name() {
    if [ $# -eq 1 ]; then
        path=.jupyter
        name="$1"; shift
    elif [ $# -eq 2 ]; then
        path="$1"; shift
        name="$1"; shift
    else
        echo "Usage«: jupyter_install_kernel_path_name [path=.jupyter] <name>" >&2
        return 1
    fi
    python -m ipykernel install --prefix "${1:-.jupyter}" --name "$name"
}
export -f jupyter_install_kernel_path_name
defn jikpn jupyter_install_kernel_path_name
defn jipn jupyter_install_kernel_path_name

jupyter_install_r_kernel() {
  Rscript -e "IRkernel::installspec($1)"
}
export -f jupyter_install_r_kernel
defn jirk jupyter_install_r_kernel

jupyter_install_r_kernel_path() {
    jupyter_install_r_kernel "prefix = '${1:-.jupyter}'"
}
export -f jupyter_install_r_kernel_path
defn jirkp jupyter_install_r_kernel_path

defn jp jupyter
defn jnb jupyter notebook
defn jbp jupyter notebook --port
jupyter_notebook_local_path() {
    JUPYTER_PATH=.jupyter/share/jupyter jupyter notebook --ContentsManager.allow_hidden=true --port "$@"
}
defn jbpp jupyter_notebook_local_path
jupyter_notebook_local_path_hash_port() {
    jupyter_notebook_local_path "$(hash-port.py)" "$@"
}
export -f jupyter_notebook_local_path_hash_port
defn jbphp jupyter_notebook_local_path_hash_port
defn jnbp jupyter notebook --port
# Useful for running Jupyter in Docker (requires dangling port argument value, as written)
defn jnbd jupyter notebook --ip 0.0.0.0 --ContentsManager.allow_hidden=True --allow-root --port
defn jnc jupyter nbconvert
defn jncs jupyter nbconvert --to slides
defn jncs. jupyter nbconvert --to slides --output-dir=.
defn jnct jupyter nbconvert --to
defn jnnc jupyter-nbconvert-clean
defn jpl jupyter notebook list
defn jyl jupyter notebook list
defn jkl jupyter kernelspec list
defn jyo jupyter-open.py

defn jco jupyter nbconvert --clear-output
defn jcoi jupyter nbconvert --clear-output --inplace

jupyter_skip_slides() {
    if [ "$1" == "-i" ]; then
        shift
        path="$1"
        tmp="$(mktemp)"
        jupyter_skip_slides "$@" > "$tmp"
        mv "$tmp" "$path"
    else
        if [ $# -ne 1 ]; then
            echo "Usage: ${FUNCNAME[0]} [-i] <ipynb path>" >&2
            return 1
        fi
        path="$1"; shift
        local dir="$(dirname "${BASH_SOURCE[0]}")"
        jq -f "$dir/ipynb-skip-slides.jq" "$path"
    fi
}
export -f jupyter_skip_slides
defn jss jupyter_skip_slides
defn jssi jupyter_skip_slides -i

defn jpt jupyter-parse-table.py

# See also: `juq cells -s <idx or slice> [path]`
jupyter_cell_source() {
    local usage="Usage: ${FUNCNAME[0]} [-s sep] <cell idx or range, jq syntax> [ipynb path]"
    local sep=
    if [ "$1" == "-s" ]; then
        shift
        if [ $# -eq 0 ]; then
            echo "$usage" >&2
            return 1
        fi
        local sep="$1"; shift
    else
        local sep="\n========\n"
    fi
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "$usage" >&2
        return 1
    fi
    local cells="$1"; shift
    if [[ "$cells" == *:* ]]; then
        local query=".cells[$cells] | map(.source | join(\"\")) | join(\"$sep\")"
    else
        local query=".cells[$cells].source | join(\"\")"
    fi

    if [ $# -gt 0 ]; then
        local path="$1"; shift
        jq -r "$query" "$path"
    else
        cat | jq -r "$query"
    fi
}
export -f jupyter_cell_source
defn jcs jupyter_cell_source

# See also: `juq cells -tc <idx or slice> [path]`
jupyter_code_cells() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "Usage: ${FUNCNAME[0]} <cell idx or range, jq syntax> [ipynb path]" >&2
        return 1
    fi
    local cells="$1"; shift
    local query='[.cells[] | select(.cell_type == "code")]'"[$cells]"
    if [ $# -gt 0 ]; then
        cat "$1" | jq "$query"
    else
        cat | jq "$query"
    fi
}
export -f jupyter_code_cells
defn jcc jupyter_code_cells

defn nd nbdiff-web
defn nbd nbdiff
defn nbdi nbdiff -I
defn nbds nbdiff -s
defn nds nbdiff-web -s
defn ndso nbdiff-web -so
defn ndw nbdiff-web
defn nbw nbdiff-web

defn pm papermill
defn ppm papermill
defn pmh papermill -h
defn ppmh papermill -h

copy_jupyter_config() {
  dir=".jupyter/nbconfig"
  path="$dir/notebook.json"
  ssh "$@" "mkdir -p $dir"
  host="${@:$#}"
  args=("${@:1:(($#-1))}")
  scp "${args[@]}" "$HOME/$path" "$host:$path"
}
export -f copy_jupyter_config
defn cjc copy_jupyter_config

convert_nb() {
  if [ $# -lt 1 ]; then
    echo "Illegal call to convert_nb wrapper; Usage: ${FUNCNAME[0]} <output format> <input notebook> [output path]" >&2
    return 1
  fi
  fmt="$1"; shift
  if test "$fmt" == "md" || test "$fmt" == "markdown" ; then
    xtn=md
    to=markdown
  elif test "$fmt" == "py" || test "$fmt" == "python" ; then
    xtn=py
    to=python
  elif test "$fmt" == "ipynb" || test "$fmt" == "notebook" ; then
    xtn=ipynb
    to=notebook
  else
    xtn="$fmt"
    to="$fmt"
  fi
  if test $# -eq 0 || test $# -gt 2 ; then
    echo "Usage: ${FUNCNAME[0]} <input path> [output path]" >&2
    return 2
  fi
  input="$1"; shift
  if [ $# -gt 0 ]; then
    output="$1"; shift
  else
    output="${input%.*}.$xtn"
  fi
  jupyter nbconvert --to "$to" --output "$output" "$input"
}
export -f convert_nb

notebook_to() {
  fmts="$1"; shift
  IFS=', ' read -r -a fmts <<< "$fmts"
  for fmt in "${fmts[@]}"; do
    convert_nb "$fmt" "$@"
  done
}
export -f notebook_to
defn nb2 notebook_to

defn nb2md convert_nb md
defn nb2m convert_nb md

defn nb2html convert_nb html
defn nb2h convert_nb html

defn nb2py convert_nb py
defn nb2p convert_nb py
defn n2p convert_nb py

defn nb2hm nb2 html,md

defn rpd run-pydocker.sh

# https://github.com/runsascoded/juq / https://pypi.org/project/juq.py
defn juqc juq cells
defn juqcc juq cells -tc
defn juqcco juq cells -tc -o
defn juqcm juq cells -m
defn juqco juq cells -o
defn juqcs juq cells -s
defn jmo juq merge-outputs
defn jmoi juq merge-outputs -i
defn juqmo juq merge-outputs
defn juqmoi juq merge-outputs -i

defn cnb juq papermill clean -i
defn pmc juq papermill clean
defn pmci juq papermill clean -i
defn pmcii juq papermill clean -iI
defn jpc juq papermill clean
defn jpci juq papermill clean -i
defn jpcii juq papermill clean -iI
defn juqpc juq papermill-clean
defn juqpci juq papermill-clean -i

defn jpr juq papermill run
defn jpri juq papermill run -i
defn jprii juq papermill run -iI
defn jri juq papermill run -i
defn jrii juq papermill run -iI
defn pmr juq papermill run
defn pmri juq papermill run -i
defn pmrii juq papermill run -iI
defn pri juq papermill run -i
defn prii juq papermill run -iI

summarize_nb() {
    local cwd="$(dirname "${BASH_SOURCE[0]}")"
    jq -f "$cwd/summarize-nb.jq" "$@"
}
export -f summarize_nb
defn snb summarize_nb
defn sno summarize_nb

defn hp hash-port.py
defn hshp hash-port.py

nbdime_enable() {
    local global=()
    if [ "$1" = -g ]; then
        global=(--global)
    fi
    pip install nbdime
    nbdime config-git --enable "${global[@]}"
}
export -f nbdime_enable
defn nbde nbdime_enable -g
defn nbdg nbdime_enable -g
defn nbdeg nbdime_enable -g
defn nbdel nbdime_enable

notebook_reindent_delete_ids() {
    jqi4a '.cells |= map(del(.id))' "$@"
}
export -f notebook_reindent_delete_ids
defn nrdi notebook_reindent_delete_ids

git_notebook_diff_flags() {
  local global=()
  if [ "$1" = -g ]; then
    global=(--global)
    shift
  fi
  local attr
  attr="$(git attr-diff-type foo.ipynb)"
  if [ -z "$attr" ]; then
    echo 'No .gitattributes found for *.ipynb; try:' >&2
    echo '' >&2
    local attrs_file
    attrs_file="$(git config core.attributesfile)"
    if [ -z "$attrs_file" ]; then
      echo '    git config --global core.attributesfile ~/.gitattributes' >&2
    else
      attrs_file="$HOME/.gitattributes"
    fi
    echo "    echo \"*.ipynb diff=nb\" >> $attrs_file" >&2
    return 1
  fi
  local cmd
  cmd=(git config "${global[@]}" "diff.$attr.command")
  if [ $# -eq 0 ]; then
    # Print config
    true
  elif [ $# -eq 1 ] && [ -z "$1" ]; then
    # Unset flags
    cmd+=("git-nbdiffdriver diff")
  else
    # Set flags
    cmd+=("git-nbdiffdriver diff $*")
  fi
  echo "${cmd[*]}" >&2
  "${cmd[@]}"
}
export -f git_notebook_diff_flags
defn gndf git_notebook_diff_flags
alias gndfs="git_notebook_diff_flags '-s'"
alias gndfu="git_notebook_diff_flags ''"
alias gnfs="git_notebook_diff_flags '-s'"
alias gnfu="git_notebook_diff_flags ''"
defn gndg git_notebook_diff_flags -g
alias gndgs="git_notebook_diff_flags -g '-s'"
alias gndgu="git_notebook_diff_flags -g ''"
