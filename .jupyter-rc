install_kernel() {
  if [ $# -eq 0 ]; then
    if [ -n "$CONDA_DEFAULT_ENV" ]; then
        kernel="conda-$CONDA_DEFAULT_ENV"
    else
        kernel="$(pyenv version | first)"
    fi
  else
    kernel="$1"
    shift
  fi
  python -m ipykernel install --user --name "$kernel"
}
export -f install_kernel
defn jik install_kernel
install_kernel_path() {
    python -m ipykernel install --prefix "${1:-.jupyter}"
}
export -f install_kernel_path
defn jikp install_kernel_path

defn jp jupyter
defn jnb jupyter notebook
defn jbp jupyter notebook --port
defn jbpp jupyter notebook --data-dir .jupyter/share/jupyter --port
jupyter_notebook_local_path_hash_port() {
    JUPYTER_PATH=.jupyter/share/jupyter jupyter notebook --port "$(hash-port.py)"
}
export -f jupyter_notebook_local_path_hash_port
defn jbphp jupyter_notebook_local_path_hash_port
defn jnbp jupyter notebook --port
# Useful for running Jupyter in Docker (requires dangling port argument value, as written)
defn jnbd jupyter notebook --ip 0.0.0.0 --ContentsManager.allow_hidden=True --allow-root --port
defn jnc jupyter nbconvert
defn jncs jupyter nbconvert --to slides
defn jncs. jupyter nbconvert --to slides --output-dir=.
defn jnct jupyter nbconvert --to
defn jnnc jupyter-nbconvert-clean
defn jpl jupyter notebook list
defn jyl jupyter notebook list
defn jkl jupyter kernelspec list
defn jyo jupyter-open.py

jupyter_skip_slides() {
    if [ "$1" == "-i" ]; then
        shift
        path="$1"
        tmp="$(mktemp)"
        jupyter_skip_slides "$@" > "$tmp"
        mv "$tmp" "$path"
    else
        if [ $# -ne 1 ]; then
            echo "Usage: $0 [-i] <ipynb path>" >&2
            return 1
        fi
        path="$1"; shift
        local dir="$(dirname "${BASH_SOURCE[0]}")"
        jq -f "$dir/ipynb-skip-slides.jq" "$path"
    fi
}
export -f jupyter_skip_slides
defn jss jupyter_skip_slides
defn jssi jupyter_skip_slides -i

defn jpt jupyter-parse-table.py

# See also: `juq cells -s <idx or slice> [path]`
jupyter_cell_source() {
    local usage="Usage: $0 [-s sep] <cell idx or range, jq syntax> [ipynb path]"
    local sep=
    if [ "$1" == "-s" ]; then
        shift
        if [ $# -eq 0 ]; then
            echo "$usage" >&2
            return 1
        fi
        local sep="$1"; shift
    else
        local sep="\n========\n"
    fi
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "$usage" >&2
        return 1
    fi
    local cells="$1"; shift
    if [[ "$cells" == *:* ]]; then
        local query=".cells[$cells] | map(.source | join(\"\")) | join(\"$sep\")"
    else
        local query=".cells[$cells].source | join(\"\")"
    fi

    if [ $# -gt 0 ]; then
        local path="$1"; shift
        jq -r "$query" "$path"
    else
        cat | jq -r "$query"
    fi
}
export -f jupyter_cell_source
defn jcs jupyter_cell_source

# See also: `juq cells -tc <idx or slice> [path]`
jupyter_code_cells() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "Usage: $0 <cell idx or range, jq syntax> [ipynb path]" >&2
        return 1
    fi
    local cells="$1"; shift
    local query='[.cells[] | select(.cell_type == "code")]'"[$cells]"
    if [ $# -gt 0 ]; then
        cat "$1" | jq "$query"
    else
        cat | jq "$query"
    fi
}
export -f jupyter_code_cells
defn jcc jupyter_code_cells

defn nd nbdiff-web
defn nbd nbdiff
defn nbdi nbdiff -I
defn nbds nbdiff -s
defn nds nbdiff-web -s
defn ndso nbdiff-web -so
defn ndw nbdiff-web
defn nbw nbdiff-web

defn pm papermill
defn ppm papermill
defn pmh papermill -h
defn ppmh papermill -h

copy_jupyter_config() {
  dir=".jupyter/nbconfig"
  path="$dir/notebook.json"
  ssh "$@" "mkdir -p $dir"
  host="${@:$#}"
  args=("${@:1:(($#-1))}")
  scp "${args[@]}" "$HOME/$path" "$host:$path"
}
export -f copy_jupyter_config
defn cjc copy_jupyter_config

convert_nb() {
  if [ $# -lt 1 ]; then
    echo "Illegal call to convert_nb wrapper; usage: $0 <output format> <input notebook> [output path]" >&2
    return 1
  fi
  fmt="$1"; shift
  if test "$fmt" == "md" || test "$fmt" == "markdown" ; then
    xtn=md
    to=markdown
  elif test "$fmt" == "py" || test "$fmt" == "python" ; then
    xtn=py
    to=python
  elif test "$fmt" == "ipynb" || test "$fmt" == "notebook" ; then
    xtn=ipynb
    to=notebook
  else
    xtn="$fmt"
    to="$fmt"
  fi
  if test $# -eq 0 || test $# -gt 2 ; then
    echo "Usage: $0 <input path> [output path]" >&2
    return 2
  fi
  input="$1"; shift
  if [ $# -gt 0 ]; then
    output="$1"; shift
  else
    output="${input%.*}.$xtn"
  fi
  jupyter nbconvert --to "$to" --output "$output" "$input"
}
export -f convert_nb

notebook_to() {
  fmts="$1"; shift
  IFS=', ' read -r -a fmts <<< "$fmts"
  for fmt in "${fmts[@]}"; do
    convert_nb "$fmt" "$@"
  done
}
export -f notebook_to
defn nb2 notebook_to

defn nb2md convert_nb md
defn nb2m convert_nb md

defn nb2html convert_nb html
defn nb2h convert_nb html

defn nb2py convert_nb py
defn nb2p convert_nb py

defn nb2hm nb2 html,md

defn rpd run-pydocker.sh

defn juqc juq cells
defn juqcc juq cells -tc
defn juqcco juq cells -tc -o
defn juqcm juq cells -m
defn juqco juq cells -o
defn juqcs juq cells -s
defn juqpc juq papermill-clean
defn juqpci juq papermill-clean -i
defn juqmo juq merge-outputs
defn juqmoi juq merge-outputs -i

clean_notebook() {
    jq='.cells |= map(del(.id) | .metadata |= del(.papermill,.execution,.widgets)) | del(.metadata.papermill)'
    if [ $# -eq 0 ]; then
        cat | jq "$jq"
    elif [ $# -eq 1 ]; then
        out="$(mktemp)"
        echo "Cleaning $1 in-place (temp file: $out)" >&2
        jq "$jq" "$1" > "$out"
        mv "$out" "$1"
    elif [ $# -eq 2 ]; then
        in="$1"; shift
        out="$1"; shift
        if [ -d "$out" ]; then
            out="${out%/}/$(basename "$in")"
        fi
        echo "Cleaning $in, saving to $out" >&2
        jq "$jq" "$in" > "$out"
    else
        echo "Usage: clean_notebook [path [out_path]]" >&2
        return 1
    fi
}
defn cnb clean_notebook

papermill_clean() {
    if [ $# -lt 2 ]; then
        echo "Usage: $0 [...papermill args] <notebook path> <output path>" >&2
        return 1
    fi
    in="${@: -2:1}"
    echo "in: ${in[*]}"
    out="${@: -1}"
    if [ -d "$out" ]; then
        out="${out%/}/$(basename "$in")"
    fi
    args=("${@:1:(($#-2))}")
    papermill "${args[@]}" "$in" "$out"
    clean_notebook "$out"
}
export -f papermill_clean
defn pmc papermill_clean

papermill_clean_inplace() {
    path=${@: -1}
    tmp="$(mktemp)"
    papermill "$@" "$tmp"
    clean_notebook "$tmp" "$path"
}
export -f papermill_clean_inplace
defn pmci papermill_clean_inplace

summarize_nb() {
    local cwd="$(dirname "${BASH_SOURCE[0]}")"
    jq -f "$cwd/summarize-nb.jq" "$@"
}
export -f summarize_nb
defn snb summarize_nb
defn sno summarize_nb

defn hp hash-port.py
defn hshp hash-port.py

nbdime_enable() {
    pip install nbdime
    nbdime config-git --enable
}
export -f nbdime_enable
defn nbde nbdime_enable
